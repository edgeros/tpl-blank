
declare module "yallist" {
   interface Node {
      next: Node;
      prev: Node;
      value: any;
      list: yallist;
   }

   class yallist {
      constructor(initData?: Array): Array
      length: number
      //
      head(): Node
      tail(): Node
      push(...args: any): void
      pop(): any
      splice(start: number, deleteCount: number, ...item: any): Array
      reverse(): Array
      shift(): Array
      unshift(...items: any): number
      toArray(): Array
      toArrayReverse(): Array
      forEach(fn: Function, thisp?: object)
      forEachReverse(fn: Function, thisp?: object)
      get(n: number): any
      getReverse(n: number): any

      map(fn: Function, thisp?: object)
      mapReverse(fn: Function, thisp?: object)

      reduce(fn: Function, initial?: object): any
      reduceReverse(fn: Function, initial?: object): any
      slice(from?: number, to?: number): yallist
      sliceReverse(from?: number, to?: number): yallist

      pushNode(node: Node);
      removeNode(node: Node);
      unshiftNode(node: Node);


   }
export = yallist
}