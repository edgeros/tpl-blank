declare module "web_middlwware" {

    interface JsonOpt{
        limit : number | string;
        strict : boolean;
        reviver : any;
        type : string | Array<any> | Function;
    }

    interface TextOpt{
        limit : number | string;
        type : string | Array<any> | Function;
    }

    interface RawOpt{
        limit : number | string;
        type : string | Array<any> | Function;
    }

    interface UrlencodedOpt{
        limit : number | string;
        type : string | Array<any> | Function;
        parameterLimit : number;
    }

    export class bodyParser {
        
        /**
         * Returns middleware that parses all bodies as a Buffer and only looks at requests where the Content Type header matches the type option.
         * 
         * Returns middleware that only parses json and only looks at requests where the Content-Type header matches the type option.
         * 
         * @param options {JsonOpt} :
         */
        static json(options?: JsonOpt) : any;
        
        /**
         * options {Object} The raw function takes an optional options object that may contain any of the following keys:
         * 
         * Returns middleware that parses all bodies as a Buffer and only looks at requests where the Content Type header matches the type option.
         * 
         * @param options {Object} The raw function takes an optional options object
         */
        static raw(options?: RawOpt) : any;
        
        /**
         * A new body string containing the parsed data is populated on the requestobject after the middleware (i.e. req.body). This will be a string of the body.
         * 
         * Returns middleware that parses all bodies as a string and only looks at requests where the Content-Type header matches the type option.
         * 
         * @param options {Object} The text function takes an optional options object
         */
        static text(options?: TextOpt) : any;
        
        /**
         * A new body string containing the parsed data is populated on the requestobject after the middleware (i.e. req.body). 
         * This object will contain key-value pairs, 
         * where the value can be a string or array (when extended is false), or any type (when extended is true).y.
         * 
         * Returns middleware that only parses urlencoded bodies and only looks at requests where the Content-Type header matches the type option.
         * 
         * @param options {Object} The text function takes an optional options object
         */
        static urlencoded(options?: UrlencodedOpt) : any;
    }

    interface MulterOpt {
        dest : string;
        fileFilter : Function;
        limits : object;
        preservePath : boolean;
    }

    /**
     * Multer accepts an options object, the most basic of which is the dest property, which tells Multer where to upload the files. 
     * In case you omit the options object, the files will be kept in memory and never written to disk.
     * 
     * @param opts {Object} The following are the options that can be passed to Multe
     */
    function Multer(opt : MulterOpt) : any;

    interface StorageOpt {
        destination : Function | string;
        filename : Function;
    }

    export class Multer{
    
        /**
         * The disk storage engine gives you full control on storing files to disk.
         * 
         * @param opts {Object} 
         */
        static diskStorage(opt : StorageOpt) : any;

        /**
         * The memory storage engine stores the files in memory as Buffer objects
         */
        static memoryStorage() : any;

        /**
         * Accept a single file with the name fieldname. The single file will be stored in req.file.
         * 
         * @param fieldname {String} Field name.
         */
        single(fieldname : string) : any;

        /**
         * Accept an array of files, all with the name fieldname. Optionally error out if more than maxCount files are uploaded. 
         * The array of files will be stored in req.files.
         * 
         * @param fieldname {String} Field name.
         * @param maxCount {Integer} Fields max count.
         */
        array(fieldname : string, maxCount : number) : any;

        /**
         * Accept a mix of files, specified by fields. An object with arrays of files will be stored in req.files.
         * 
         * @param fields {Array} Should be an array of objects with name and optionally a maxCount.
         */
        single(fields : Array<any>) : any;

        /**
         * Accept only text fields. If any file upload is made, error with code LIMIT_UNEXPECTED_FILE will be issued.
         */
        none() : any;

        /**
         * Accepts all files that comes over the wire. An array of files will be stored in req.files.
         */
        any() : any;

    }

    export class WebRequest {
        url : string;
        method : string;
        headers : object;
        body : object | Buffer | string;
        path : string;
        params : object;
        query : object;
        cookies : object;
        
        /**
         * Returns the specified HTTP request header field.
         * 
         * @param name {String}
         */
        header(name : string) : any;
        
        /**
         * Returns the value of param name when present.
         * 
         * @param name {String}
         * @param defaultValue {}
         */
        param(name : string, defaultValue : any) : any;
    }

    interface RenderOpt {
        cache : boolean;
        filename : string;
    }

    interface CookieOpt {
        maxAge : number;
        path : string;
    }

    export class WebResponse {
        /**
         * This method inherit to HttpOutput. Send data to client. If 'Content-Length' not set, res.write() set 'Transfer-Encoding' to 'chunked', 
         * and this method can call multiple times. After write all data, user should call res.end() to end response.
         * 
         * @param chunk {String | Number | Boolean | Object | Buffer} Http body data.
         */
        write(chunk : String | Number | Boolean | Object | Buffer) : any;
        
        /**
         * This method inherit to HttpOutput. If chunk is not empty, the chunk is sent to the client and the response is ended. 
         * After the response is finished, continuing to send data is invalid.
         * 
         * @param chunk {String | Number | Boolean | Object | Buffer} Http body data.
         */
        end(chunk?: String | Number | Boolean | Object | Buffer) : any;
        
        /**
         * Sends the HTTP response.
         * 
         * @param body {String | Number | Boolean | Object | Buffer} Http body data.
         */
        end(body?: String | Number | Boolean | Object | Buffer) : any;
        
        /**
         * Sets the response HTTP status code to statusCode and send its string representation as the response body.
         * 
         * @param statusCode {Integer} HTTP response status code.
         * @param reason {String} Response info. default: status message
         */
        sendStatus(statusCode : number, reason?: string) : any;
        
        /**
         * Sends a JSON response. This method sends a response (with the correct content-type) that is
         *   the parameter converted to a JSON string using JSON.stringify().
         * 
         * @param obj {Object} HTTP response body.
         */
        json(obj : object) : any;
        
        /**
         * Renders a view and sends the rendered HTML string to the client.
         * 
         * @param name {String} The file path of the view file to render.
         * @param options {Object} An object whose properties define local variables for the view.
         * @param callback {Function} A callback function. If provided, the method returns both the 
         *                  possible error and rendered string, but does not perform an automated response.
         */
        render(name : string, option?: RenderOpt, callback?: Function) : any;
        
        /**
         * Renders a view and sends the rendered HTML string to the client.
         * 
         * @param name {String} Cookie name.
         * @param value {String | Object} Cookie value, a string or object converted to JSON.
         * @param options {Object}
         */
        cookie(name : string, value?: string, options?: CookieOpt) : any;
        
        /**
         * Clears the cookie specified by name. For details about the options object, see res.cookie().
         * 
         * @param name {String} Cookie name.
         * @param options {Object}
         */
        clearCookie(name : string, value?: string, options?: CookieOpt) : any;
        
        /**
         * A path value of “back” has a special meaning, it refers to the URL specified in the Referer header of the request. 
         * If the Refererheader was not specified, it refers to “/”.
         * 
         * @param path {String} The response Location HTTP header to the specified path parameter.
         */
        location(path : string) : any;
        
        /**
         * Redirects to the URL derived from the specified path, with specified status, 
         * a positive integer that corresponds to an HTTP status code.
         * 
         * @param status {Integer} HTTP status, default: 302.
         * @param path {String} The response Location HTTP header to the specified path parameter.
         */
        location(status ?: number, path?: string) : any;
    }
}
