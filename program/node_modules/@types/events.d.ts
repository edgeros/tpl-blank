declare module "events" {	
    /**
     * Make target object inherit Emitter properties and methods.
     *
     */
    export function inherits(obj : object);
    
    class EventEmitter {    

        /**
         * Returns: {EventEmitter} A new emitter.
         */
        constructor();

        /**
         * It is an alias for emitter.on(eventName, listener).
         * 
         * Returns: {Emitter} This emitter.
         * 
         * @param event {String} The name of the event.
         * @param listener {Function} The callback function.
         */
        addListener(event : string, listener : Function) : EventEmitter;

        /**
         * Adds the listener callback function to the end of the listener's list for the given event. 
         * No checks are made to see if the listener has already been added. 
         * In case of multiple calls the listener will be added and called multiple times.
         * 
         * Returns: {Emitter} This emitter.
         * 
         * @param event {String} The name of the event.
         * @param listener {Function} The callback function.
         */
        on(event : string, listener : Function) : EventEmitter;

        /**
         * Synchronously calls each of the listeners registered for the event, 
         * in the order they were registered, passing the supplied arguments to each.
         * 
         * Returns: {Boolean} Returns true if the event had listeners, false otherwise.
         * 
         * @param event {String} The name of the event.
         * @param ...args {Any} Optional arguments. default: undefined.
         */
        emit(event : string, ...args : any) : boolean;

        /**
         * Adds the listener as a one time listener for the event.
         * 
         * Returns: {Emitter} This emitter.
         * 
         * @param event {String} The name of the event.
         * @param listener {Function} The callback function.
         */
        once(event : string, listener : Function) : EventEmitter;

        /**
         * Removes listener from the list of event listeners.
         * If you add the same listener multiple times, this removes only one instance of them.
         * 
         * Returns: {Emitter} This emitter.
         * 
         * @param event {String} The name of the event.
         * @param listener {Function} The callback function.
         */
        removeListener(event : string, listener : Function) : EventEmitter;

        /**
         * Removes all listeners.If event was specified, it only removes the listeners for that event.
         * 
         * Returns: {Emitter} This emitter.
         * 
         * @param event {String} The name of the event.
         */
        removeAllListeners(event?: string) : EventEmitter;
    
    }
    
    export = EventEmitter;
}

