declare module "events" {

    global {
        namespace EdgerOS {
            function inherits(obj: object);
         
               interface EventEmitter {
                addListener(event: string, listener: Function): EventEmitter;
                on(event: string, listener: Function): EventEmitter;
                emit(event: string, ...args: any): boolean;
                once(event: string, listener: Function): EventEmitter;
                removeListener(event: string, listener: Function): EventEmitter;
                removeAllListeners(event?: string): EventEmitter;

                // addListener(event: string | symbol, listener: (...args: any[]) => void): this;
                // on(event: string | symbol, listener: (...args: any[]) => void): this;
                // once(event: string | symbol, listener: (...args: any[]) => void): this;
                // removeListener(event: string | symbol, listener: (...args: any[]) => void): this;
                // off(event: string | symbol, listener: (...args: any[]) => void): this;
                // removeAllListeners(event?: string | symbol): this;
                // setMaxListeners(n: number): this;
                // getMaxListeners(): number;
                // listeners(event: string | symbol): Function[];
                // rawListeners(event: string | symbol): Function[];
                // emit(event: string | symbol, ...args: any[]): boolean;
                // listenerCount(event: string | symbol): number;
                // prependListener(event: string | symbol, listener: (...args: any[]) => void): this;
                // prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;
                // eventNames(): Array<string | symbol>;
            }
        
        }

    }
    export = EdgerOS;


  

}

