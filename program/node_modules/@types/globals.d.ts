declare function unbreakable(arrowFunc: () => void): void;

declare function synchronize(arrowFunc: () => void): void;

declare var require: any;
// Buffer class
type BufferEncoding = "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex";
type TypedArray = Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;


// EdgerOS extentions.
declare namespace EdgerOS {

    type ArrayBufferView = TypedArray | DataView;

    interface ReadableStream extends EventEmitter {
        readable: boolean;
        read(size?: number): string | Buffer;
        setEncoding(encoding: BufferEncoding): this;
        pause(): this;
        resume(): this;
        isPaused(): boolean;
        pipe<T extends WritableStream>(destination: T, options?: { end?: boolean; }): T;
        unpipe(destination?: WritableStream): this;
        unshift(chunk: string | Uint8Array, encoding?: BufferEncoding): void;
        wrap(oldStream: ReadableStream): this;
        [Symbol.asyncIterator](): AsyncIterableIterator<string | Buffer>;
    }

    interface WritableStream extends EventEmitter {
        writable: boolean;
        write(buffer: Uint8Array | string, cb?: (err?: Error | null) => void): boolean;
        write(str: string, encoding?: BufferEncoding, cb?: (err?: Error | null) => void): boolean;
        end(cb?: () => void): void;
        end(data: string | Uint8Array, cb?: () => void): void;
        end(str: string, encoding?: BufferEncoding, cb?: () => void): void;
    }


    export interface Number {
        [key: string]: any;
        second(): number
        minute(): number
        hour(): number

    }

    export interface String {
        [key: string]: any;
        byteLength: number
        isAscii(str: string): boolean
        isAsciiPrintable(str: string): boolean
        isAlpha(str: string): boolean
        isAlphaNumber(str: string): boolean
        isNumber(str: string): boolean
        isInteger(str: string): boolean

    }
    export interface Object {
        [key: string]: any;
        byteLength(obj: object): number
        clone(obj: object): object

    }
    export class Object {
        static decycle(obj: object): object

    }
    export interface JSON {
        [key: string]: any;
        byteLength(obj: object): number

    }
    export interface Array {
        [key: string]: any;
        addFd(array: Array, fd: number)
        deleteFd(array: Array, fd: number)

    }

}

